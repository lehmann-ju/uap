from uaperrors import StepError
import sys
import os
from logging import getLogger
from abstract_step import AbstractStep

logger = getLogger('uap_logger')


class RgtThor(AbstractStep):
    '''
    THOR is an HMM-based approach to detect and analyze differential peaks in
    two sets of ChIP-seq data from distinct biological conditions with
    replicates. THOR performs genomic signal processing, peak calling and
    p-value calculation in an integrated framework. For differential peak
    calling without replicates use ODIN.

    For more information please refer to:

    Allhoff, M., Sere K., Freitas, J., Zenke, M.,  Costa, I.G. (2016),
    Differential Peak Calling of ChIP-seq Signals with Replicates with THOR,
    Nucleic Acids Research, epub gkw680 [paper][supp].

    Feel free to post your question in our googleGroup or write an e-mail:
    rgtusers@googlegroups.com
    '''

    def __init__(self, pipeline):
        super(RgtThor, self).__init__(pipeline)

        self.set_cores(4)

        self.add_connection('in/alignments')
        self.add_connection('out/thor_config')
        self.add_connection('out/thor_setup_info')
        self.add_connection('out/chip_seq_bigwig')
        self.add_connection('out/diff_peaks_bed')
        self.add_connection('out/diff_narrow_peaks')

        self.require_tool('rgt-THOR')
        self.require_tool('printf')

        self.add_option('chrom_sizes_file', str, optional=False,
                        descritpion="File containing chromosome size "
                        "information generated by 'fetchChromSizes'")
        self.add_option('config_file', dict, optional=False,
                        description="A dictionary with ")
        self.add_option('genome', str, optional=False,
                        description="FASTA file containing the complete "
                        "genome sequence")

        # rgt-THOR Options
        self.add_option('binsize', int, optional=True,
                        description="Size of bins for creating the signal.")
        self.add_option('deadzones', str, optional=True,
                        description="Define blacklisted genomic regions to "
                        "be ignored by the peak caller. ")
        self.add_option('exts', str, optional=True,
                        description="Read's extension size for BAM files "
                        "(comma separated list for each BAM file in config "
                        "file). If option is not chosen, estimate extension "
                        "sizes from reads.")
        self.add_option('factors-inputs', str, optional=True,
                        description="Normalization factors for input-DNA "
                        "(comma separated list for each BAM file in config "
                        "file). If option is not chosen, estimate factors.")
        self.add_option('housekeeping-genes', str, optional=True,
                        description="Define housekeeping genes (BED format) "
                        "used for normalizing.")
        self.add_option('merge', bool, optional=True,
                        description="Merge peaks which have a distance less "
                        "than the estimated mean fragment size (recommended "
                        "for histone data).")
        self.add_option('no-correction', bool, optional=True,
                        description="Do not use multiple test correction for "
                        "p-values (Benjamini/Hochberg).")
        self.add_option('no-gc-content', bool, optional=True,
                        description="Do not normalize towards GC content.")
        self.add_option('pvalue', float, optional=True,
                        description="P-value cutoff for peak detection. Call "
                        "only peaks with p-value lower than cutoff.")
        self.add_option('report', bool, optional=True,
                        description="Generate HTML report about experiment.")
        self.add_option('save-input', bool, optional=True,
                        description="Save input DNA bigwig (if input was "
                        "provided).")
        self.add_option('scaling-factors', str, optional=True,
                        description="Scaling factor for each BAM file (not "
                        "control input-DNA) as comma separated list for each "
                        "BAM file in config file. If option is not chosen, "
                        "follow normalization strategy (TMM or HK approach)")
        self.add_option('step', int, optional=True,
                        description="Stepsize with which the window "
                        "consecutively slides across the genome to create "
                        "the signal.")

    def runs(self, run_ids_connections_files):

        options = ['binsize', 'deadzones', 'factors-inputs',
                   'housekeeping-genes', 'merge', 'no-correction',
                   'no-gc-content', 'pvalue', 'report',
                   'save-input', 'scaling-factors', 'step']
        file_options = ['chrom_sizes_file', 'genome']

        set_options = [option for option in options if
                       self.is_option_set_in_config(option)]

        option_list = list()
        for option in set_options:
            if isinstance(self.get_option(option), bool):
                # Only set option if it is True
                if self.get_option(option):
                    option_list.append('--%s' % option)
            else:
                value = str(self.get_option(option))
                if option in file_options:
                    value = os.path.abspath(value)
                option_list.append('--%s=%s' % (option, value))

        # We need to create a config file. Should look something
        # like this:
        #
        # #rep1
        # BAM files for replicates of condition 1 (taken from in-connection)
        # ...
        # #rep2
        # BAM files for replicates of condition 2 (taken from in-connection)
        # ...
        # #chrom_sizes
        # chromsizes_file (taken from option)
        # #genome (optional)
        # fasta_file (taken from option)
        # #inputs1 (optional)
        # BAM files for input of condition 1 (taken from in-connection)
        # ...
        # #inputs2 (optional)
        # BAM files for input of condition 2 (taken from in-connection)
        # ...

        config_file = self.get_option('config_file')
        for run_id in config_file.keys():
            # Create a new run
            input_files = list()
            with self.declare_run(run_id) as run:
                # Collect info required for config file
                run_config = config_file[run_id]
                # List containing lines for THOR's config file
                config_content = dict()
                # Add rep1, rep2 and if available inputs1 and inputs2
                for key in ['rep1', 'rep2', 'inputs1', 'inputs2']:
                    try:
                        # run_ids: list of run IDs whose in/alignments files
                        #          are written to the config_file
                        run_ids = run_config[key]
                    except KeyError as e:
                        # rep1 and rep2 are required
                        if key in ['rep1', 'rep2']:
                            raise StepError(self, "Required key %s missing in "
                                            "'config_file' for run %s"
                                            % (key, run_id))
                        # inputs1 and inputs2 are optional
                        else:
                            pass
                    config_content[key] = list()
                    for align_run in run_ids:
                        input_paths = run_ids_connections_files[align_run]['in/alignments']
                        if input_paths == [None]:
                            raise StepError(
                                self, "%s provides no alignments for "
                                " run %s" %
                                (align_run, run_id))
                        input_files.extend(input_paths)
                        config_content[key].extend(input_paths)
                # Add chrom_sizes
                # control chrom_sizes file to be a file
                if not os.path.isfile(self.get_option('chrom_sizes_file')):
                    raise Exception("Chromsizes file %s is not a file"
                                    % self.get_option('chrom_sizes_file'))
                file = os.path.abspath(self.get_option('chrom_sizes_file'))
                config_content['chrom_sizes'] = [file]
                # Add genome if available
                if self.is_option_set_in_config('genome'):
                    config_content['genome'] = [
                        os.path.abspath(self.get_option('genome'))]

                # Create THOR config file
                with run.new_exec_group() as pre_rgt_thor:
                    # Write config_file to disk using printf
                    config_path = run.add_output_file(
                        'thor_config',
                        'thor_%s.config' % run_id,
                        input_files
                    )
                    config_string = ""
                    for header in config_content.keys():
                        config_string += "#%s\n" % header
                        for path in config_content[header]:
                            config_string += "%s\n" % path

                    printf = [self.get_tool('printf'),
                              config_string]
                    pre_rgt_thor.add_command(
                        printf,
                        stdout_path=config_path
                    )

                # Assemble the rgt-THOR command
                with run.new_exec_group() as rgt_thor_eg:
                    rgt_thor = [self.get_tool('rgt-THOR'),
                                '--output-dir',
                                '.'
                                '--name', run_id]
                    rgt_thor.extend(option_list)
                    rgt_thor.append(config_path)
                    rgt_thor_eg.add_command(rgt_thor)

                    # Collect files created by rgt-THOR
                    # - THOR setup info
                    run.add_output_file(
                        'thor_setup_info',
                        '%s-setup.info' % run_id,
                        input_files
                    )
                    # - THOR created BigWig files
                    for (rep, suf) in {'rep1': 's1', 'rep2': 's2'}.items():
                        for i in range(len(config_content[rep])):
                            run.add_output_file(
                                'chip_seq_bigwig',
                                '%s-%s-rep%s.bw' % (run_id, suf, i),
                                input_files
                            )

                    # - Differential peaks BED file
                    run.add_output_file(
                        'diff_peaks_bed',
                        '%s-diffpeaks.bed' % run_id,
                        input_files
                    )
                    # - Uncorrected (?) differential peaks BED file
                    run.add_output_file(
                        'diff_peaks_bed',
                        '%s-uncor-diffpeaks.bed' % run_id,
                        input_files
                    )
                    # - Differential narrow peaks file
                    run.add_output_file(
                        'diff_narrow_peaks',
                        '%s-diffpeaks.narrowPeak' % run_id,
                        input_files
                    )
                    # - Uncorrected (?) differential narrow peaks file
                    run.add_output_file(
                        'diff_narrow_peaks',
                        '%s-uncor-diffpeaks.narrowPeak' % run_id,
                        input_files
                    )
